
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define GRAPHITE 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM NAV>;
            then-layer = <FUN>;
        };
    };
    behaviors {
        sqt_unds: apostrophe_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        hyph_quot: hyphen_doublequotes {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
    };



        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  none |  B  |  L  |  D  |  W  |  Z  |   |  '_  |  F   |  O  | U  |  J  | none |
// | none |  N  |  R  |  T  |  S  |  G  |   |  Y  |  H   |  A  |  E  |  I  |  none |
// | none |  Q  |  X  |  M  |  C  |  V  |   |  K  |  P   |  .  |  -"  |  ,  | none  |
//                    | TAB | / | SPC |   | Back | Enter  | ; |
                        bindings = <
   &none   &kp B &kp L &kp D &kp W &kp Z   &sqt_unds &kp F  &kp O     &kp U   &kp J    &none
   &none &mt LGUI N &mt LALT R &mt LCTRL T &mt LSHFT S &kp G   &kp Y &mt RSFT H  &mt RCTRL A     &mt RALT E   &mt RGUI I &none
   &none &kp Q &kp X &kp M &kp C &kp V   &kp K &kp P  &kp DOT &hyph_quot &COMMA &none
                  &lt NAV TAB &lt NUM SLASH &kp SPACE   &kp BACKSPACE &kp ENTER &lt SYM SEMI
                        >;
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |  none |     |     |      |      |    |   |  [  |  7  |  8  |  9  |  ]  | none |
// | none  | GUI | ALT | CTRL | SFHT |    |   |  =  |  4  |  5  |  6  |  ;  | none |
// | none  |     |     |      |      |    |   |  \  |  1  |  2  |  3  |  `  | none |
//                     |      |      |    |   |  -  |  0  |  .  |
                        bindings = <
   &none    &trans  &trans     &trans     &trans   &trans     &kp LBKT   &kp N7   &kp N8 &kp N9    &kp RBKT &none
   &none &kp LGUI &kp LALT &kp LCTRL &kp LSHFT &trans         &kp EQUAL &kp N4 &kp N5 &kp N6 &kp SEMI &none
   &none  &trans       &trans       &trans       &trans       &kp BSLH   &kp N1   &kp N2   &kp N3 &kp GRAVE  &trans &none
                                &trans     &trans   &trans      &kp MINUS  &kp N0   &kp DOT
                        >;
                };

                sym_layer {
// -----------------------------------------------------------------------------------------
// | none |  !  |  &  |  *  |  {  |  }  |   |     |     |     |     |     |      |
// | none |  ;  |  $  |  %  |  ^  |  +  |   |     |     |     |     |     |      |
// | none |  ~  |  :  |  @  |  #  | "|" |   |     |     |     |     |     |      |
//                    |  (  |  )  |  _  |   |     |     |     |
                        bindings = <
   &none  &kp EXCL &kp AMPS &kp AST &kp LBRC &kp RBRC   &kp CARET &trans  &trans &trans &trans &none
   &none &kp COLON   &kp DLLR &kp PRCNT   &kp CARET   &kp PLUS      &trans &kp RSFT &kp RCTRL  &kp RALT &kp RGUI &none
   &none &kp TILDE   &kp COLON &kp AT   &kp HASH   &kp PIPE      &trans &trans  &trans  &trans &trans &none
                             &kp LPAR &kp RPAR   &kp UNDER   &trans   &trans    &trans
                        >;
                };

                 nav_layer {
// -----------------------------------------------------------------------------------------
// | none |     |     |     |     |     |   |     |     |  UP   |     |     |      |
// | none | GUI | ALT | CTRL| SFHT|     |   |     |LEFT | DOWN  |RIGHT|     |      |
// | none |     |     |     |     |     |   | COPY|Paste|  C(A) |     |     |      |
//                    |     |     |     |   | HOME|  END|  ESC  |
                        bindings = <
   &none  &trans &trans &trans &trans &trans   &trans &trans  &kp UP &trans &trans &none
   &none &kp LGUI   &kp LALT &kp LCRTL   &kp LSHFT   &trans      &trans &kp LEFT &kp DOWN  &kp RIGHT &trans &none
   &none &trans   &trans &trans   &trans   &trans      &kp LC(C) &kp LC(V)  &kp LC(A)  &trans &trans &none
                             &trans &trans   &trans   &kp HOME   &kp END    &kp ESC
                        >;
                };

                 fun_layer {
// -----------------------------------------------------------------------------------------
// | none |      |  Mute  |  VOL DN  |  VOL UP  | Out TOG |   |     |  F7   |  F8   |  F9   | F12    |      |
// | none |  BT0 |   BT1  |    BT2   |    BT3   |   BT4   |   |     |  F4   |  F5   |  F6   | F11    |      |
// | none |BT CLR|  PREV  |    PP    |   NEXT   |         |   |     |  F1   |  F2   |  F3   | F10    |      |
//                        |          |          |         |   |     |       |       |
                        bindings = <
   &none &trans &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &out OUT_TOG    &trans &kp F7  &kp F8 &kp F9 &kp F12 &none
   &none &bt BT_SEL 0   &bt BT_SEL 1 &bt BT_SEL 2   &bt BT_SEL 3   &trans      &trans &kp F4 &kp F5  &kp F6 &kp F11 &none
   &none &bt BT_CLR   &kp C_PREV &kp C_PP   &kp C_NEXT   &trans      &trans &kp F1  &kp F2  &kp F3 &kp F10 &none
                             &trans &trans   &trans   &trans   &trans    &trans
                        >;
                };
        };
};
